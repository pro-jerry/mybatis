#log4j.rootLogger=INFO,DEBUG,Console,File
#
#
#log4j.appender.Console=org.apache.log4j.ConsoleAppender
#log4j.appender.Console.Target=System.out
#log4j.appender.Console.layout = org.apache.log4j.PatternLayout
#log4j.appender.Console.layout.ConversionPattern=[%c] - %m%n
#
#log4j.appender.File = org.apache.log4j.RollingFileAppender
#log4j.appender.File.File = logs/ssm.log
#log4j.appender.File.MaxFileSize = 10MB
#log4j.appender.File.Threshold = ALL
#log4j.appender.File.layout = org.apache.log4j.PatternLayout
#log4j.appender.File.layout.ConversionPattern =[%p] [%d{yyyy-MM-dd HH\:mm\:ss}][%c]%m%n

#定义打印日志粒度
#日志粒度由高到低-->off,fatal,error,warm,info,debug,all
#off:最高等级，用于关闭所有日志记录
#fatal:指出每个严重的错误事件,将会导致应用程序的退出
#error:指出虽然发生错误事件，但仍然不影响系统的继续运行
#warm:表明会出现潜在的错误情形
#info:一般和在粗粒度级别上，强调应用程序的运行全程
#debug:一般用于细粒度级别上，对调试应用程序非常有帮助
#all:最低等级，用于打开所有日志记录
#如果使用了info级别，则应用程序中所有低于info级别的日志信息(如debug)将不会被打印出来
log4j.rootLogger=debug,Console,File,D,E

####输出日志到控制台##########
#log4j.appender.Console(console和file可以为任意名字)=org.apache.log4j.ConsoleAppender:日志输出到控制台
log4j.appender.Console=org.apache.log4j.ConsoleAppender
log4j.appender.Console.Target=System.out
#log4j.appender.Console.layout = org.apache.log4j.PatternLayout:指定布局格式，(常用)
log4j.appender.Console.layout = org.apache.log4j.PatternLayout
#	%l-->例如:com.mybatis.springtest.Test.testLog4j(Test.java:89) 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数
#	%p-->输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
#	%r-->例如:950	 输出自应用启动到输出该log信息耗费的毫秒数
#	%t-->例如:Thread-0或main..	输出产生该日志事件的线程名
#	%d-->例如:2016-06-29 21:53:41,789 输出日志时间点的日期或时间。一般格式为:%d{yyyy-MM-dd HH:mm:ss,SSS}
#	%c-->例如:org.springframework.test.context.support.DirtiesContextTestExecutionListener 输出所属的类目，通常就是所在类的全名
#	%m-->例如:123	输出代码中指定的消息
#	%n-->输出一个回车换行符,否则日志只有一行	
log4j.appender.Console.layout.ConversionPattern=[%l] [%p] <%r> <%t> <%d{yyyy-MM-dd HH:mm:ss,SSS}> [%c] - [%m]%n

### 输出日志到文件
#RollingFileAppender:文件大小到达指定尺寸时产生一个新的文件
log4j.appender.File = org.apache.log4j.RollingFileAppender
#指定日志文件位置
log4j.appender.File.File = logs/ssm.log
#MaxFileSize:最大文件大小
#log4j.appender.File.MaxBackupIndex=2:指定备份文件数
log4j.appender.File.MaxFileSize = 10MB
#Threshold：日志记录级别
log4j.appender.File.Threshold = ALL
#PatternLayout:灵活的指定布局格式
#TTCCLayout：包含日志产生的时间，执行绪，类别等信息
#SimpleLayout：包含日志信息的级别和信息字符串
#HTMLLayout：以HTML表格形式布局
log4j.appender.File.layout = org.apache.log4j.PatternLayout
log4j.appender.File.layout.ConversionPattern =[%p] [%d{yyyy-MM-dd HH\:mm\:ss}][%c]%m%n

### 输出DEBUG 级别以上的日志到logs/debug.log (logs是项目文件夹下的文件夹)###
#DailyRollingFileAppender:每天产生一个日志文件
log4j.appender.D = org.apache.log4j.DailyRollingFileAppender
log4j.appender.D.File = logs/debug.log
log4j.appender.D.Append = true
log4j.appender.D.Threshold = DEBUG 
log4j.appender.D.layout = org.apache.log4j.PatternLayout
log4j.appender.D.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n


### 输出ERROR 级别以上的日志到=logs/error.log ###
log4j.appender.E = org.apache.log4j.DailyRollingFileAppender
log4j.appender.E.File =logs/error.log 
log4j.appender.E.Append = true
log4j.appender.E.Threshold = ERROR 
log4j.appender.E.layout = org.apache.log4j.PatternLayout
log4j.appender.E.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n


####把日志写进数据库请关注：####
#<a href=http://wiki.jikexueyuan.com/project/log4j/logging-database.html/>


###注意事项###
######将日志输出到日志文件时，指定文件的位置，生成文件最大容量#########
#log4j.appender.D = org.apache.log4j.DailyRollingFileAppender 每天产生一个日志文件
#log4j.appender.D = org.apache.log4j.ConsoleAppender	输出到控制台
#log4j.appender.D = org.apache.log4j.FileAppender 输出到文件
#log4j.appender.D = org.apache.log4j.RollingFileAppender	文件大小到达指定尺寸时产生一个新的文件
#log4j.appender.D = org.apache.log4j.WriteAppender 将日志信息以流格式发送到任意指定的地方
#log4j.appender.D = org.apache.log4j.JDBCAppender	将日志信息保存到数据库中

###日志的布局格式####
#log4j.appender.File.layout = org.apache.log4j.SimpleLayout	包含日志信息的级别和信息字符串
#log4j.appender.File.layout = org.apache.log4j.HTMLLayout	以HTML表格形式布局
#log4j.appender.File.layout = org.apache.log4j.PatternLayout	可以灵活的指定布局格式，常用
#log4j.appender.File.layout = org.apache.log4j.TTCCLayout  包含日志产生的时间，执行绪，类别等信息
